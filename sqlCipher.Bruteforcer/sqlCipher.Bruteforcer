Python Bruteforcer: Reverse Engineer AES decyption process 
	 
#!/usr/bin/python3

from Crypto.Cipher import AES
import base64
import sys
import os
import hashlib
from pysqlcipher3 import dbapi2 as sqlcipher
import linecache
import re
import binascii
import time

if len(sys.argv) != 2:
 print ("Usage: decryptCipher.py <passwordInput>") 
 sys.exit(0)

pwInput=sys.argv[1]




#-------------------------------------------------------------------------------------------------
#This program attempts to decrypt the ciphertext called "secret" based on user password.
#
#To run in bruteforce mode using a password list (like rockyou.txt), I recommend to use the following command:
#
#      for i in `cat pwlist.txt`;do echo -n $i | ./decryptCipher.py $i;done
#
#If it finds the PRAGMA, it will write a file called "SUCCESS.xml" in the directory where this script was run!!!
#------------------------------------------------------------------------------------------------
#
#Tested in Unix Environment
#
#Setup of Python crypto library may be challenging. Run the following command to download Crypto Dependencies:
#
# sudo apt install sqlcipher libsqlcipher0 libsqlcipher-dev
# sudo -H pip3 install pysqlcipher
#
#-------------------------------------------------------------------------------------------------

#------------------------------------------------------------------
#Understanding of Execution flow based on review: 
# 
#
#1.A ciphertext is generated by encrypting the Pragma with the Encryption Key (AES) + IV. This is stored on disk under filename LoginActivity.xml #  as the "secret".
#
#2.A saltString is generated by concatenating B64 format of salt and B64 format of the IV. This concatenated string is B64 encoded again (Double #  B64 encoding). This is stored on disk under filename saltString.

#
#
#
#-----------------------------------------------------------------
#Start of Program Execution
#-----------------------------------------------------------------

#String concatenated by salt and IV (This is based on the output of testing the application and copied from Shared_Prefs)
#saltString = "OGJkWHFHU21XSjhTbjQ0d1A3TC94QT09Cg==&#10;Nkd0N29iNkFvYU93eUdoUVhqNUQ0UT09Cg=="


# Salt: Double B64 in saltString / Was in Single B64 Byte[] format when used in the Key gen process 
saltString = (linecache.getline("/root/Desktop/Myspace/Nugget/Test.LoginActivity.xml",3))
saltInput = base64.b64decode(saltString[24:60])
#print (type(saltInput))


# IV: Double B64 in saltString / Double B64 Byte[] format when used in the Key gen process 
kek_ivInput = base64.b64decode(base64.b64decode(saltString[65:101]))
#print (type (kek_ivInput))


#Convert to Char Array as this was format used in the Java decrypt function
pwdIn = pwInput.encode()
#print (type(pwdIn))


#Key generation 
key = hashlib.pbkdf2_hmac('sha256', pwdIn, saltInput, 7724, dklen=16)


#Derived from the LoginActivity.xml details generated by the Application and stored on the disk. This is the ciphertext 

secret1 = "5+3aw/8Yps9ppYI0DZxMtXEZ9cmTqdLGt2Gph17kCYtoIFoSbArLfBT4vLBIrOR0LtyKo8u2mbLPVgL2Uzul1Q==" 
#secret1 = "VW7HS5jkzIJbawwPA9DH/9WGiUZp4yq7tN7gZJYxdB1v8QysR1c0kFfl72RB1fyNWmj1F9KvN/9T8ouPOwmAuQ=="

#print (secret1 + "copy")

secret2 = (binascii.a2b_base64(secret1))
#print (secret2)
#print (type(secret2))


secrEx = (linecache.getline("/root/Desktop/Myspace/Nugget/Test.LoginActivity.xml",4))
secrEx1 = (((secrEx[26:123])).replace ('&#10;', ''))
secret = (binascii.a2b_base64(secrEx1.replace ('&#10', '')))
#print (secret)
#binascii.a2b_base64(secrEx2)
#base64.b64decode((secrEx2))
#secret = secrEx2.encode()
#print (secret)


#Initialisation Vector (IV) extracted from saltString variable (from LoginActivity.xml)
iv = kek_ivInput


#Decryption of the ciphertext called "secret" using AES algorithm CBC mode
#Output is the Pragma to decrypt/encrypt the Database
decryption_suite = AES.new(key, AES.MODE_CBC, iv)
pragmaKey = decryption_suite.decrypt(secret)
#print (pragmaKey)
#print (len(pragmaKey))
#he = (pragmaKey.hex())
#print (he)
#print (len(he))




try:
 k = pragmaKey.decode("utf-8")
 m = "%r"%k
 n = m[1:-57]

except:
 t = (time.time())
 print('Encoding Problem  ',t)
 time.sleep(0.7)
 sys.exit(0)

"""
st = 'TVomGJMjOfF3zJ3VItZfWO0olqdkzMD6HqEY9u9n7YkvfnWImm'

if ( n == st ):
   print ('k and st1 equals')
else:
   print ('not equal')
"""


#-------------------------------------
#Database Connection 
#-------------------------------------
"""
#Edit location of the Datase
db = sqlcipher.connect('/root/Desktop/Myspace/Nugget/test13dec.db')

pragma1 = pragmaKey
try: 
  db.execute('pragma key="TVomGJMjOfF3zJ3VItZfWO0olqdkzMD6HqEY9u9n7YkvfnWImm" ')
  db.execute('select * from notes;').fetchall()
  print('PRAGMA found1!')
    
except:
  print('No luck1')

#-----
"""

db2 = sqlcipher.connect('/root/Desktop/Myspace/Nugget/test13dec.db')

pragma1 = pragmaKey
try: 

  db2.execute("PRAGMA key='" + n + "'")
  db2.execute('select * from notes;').fetchall()
  print('PRAGMA found2!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
  sys.stdout = open('SUCCESS.xml', 'w')
    
except:
  print('No luck2')



	 
